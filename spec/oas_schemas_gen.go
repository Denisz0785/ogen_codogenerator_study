// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

// Ref: #/components/schemas/AllExpenses
type AllExpenses struct {
	Data []Expense `json:"data"`
}

// GetData returns the value of Data.
func (s *AllExpenses) GetData() []Expense {
	return s.Data
}

// SetData sets the value of Data.
func (s *AllExpenses) SetData(val []Expense) {
	s.Data = val
}

func (*AllExpenses) getAllExpensesRes() {}

// DeleteExpenseOK is response for DeleteExpense operation.
type DeleteExpenseOK struct{}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val OptString) {
	s.Message = val
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

func (*ErrorResponseStatusCode) getAllExpensesRes() {}

// Ref: #/components/schemas/Expense
type Expense struct {
	ID            int         `json:"id"`
	ExpenseTypeID string      `json:"expense_type_id"`
	ReatedAt      OptDateTime `json:"reated_at"`
	SpentMoney    float64     `json:"spent_money"`
}

// GetID returns the value of ID.
func (s *Expense) GetID() int {
	return s.ID
}

// GetExpenseTypeID returns the value of ExpenseTypeID.
func (s *Expense) GetExpenseTypeID() string {
	return s.ExpenseTypeID
}

// GetReatedAt returns the value of ReatedAt.
func (s *Expense) GetReatedAt() OptDateTime {
	return s.ReatedAt
}

// GetSpentMoney returns the value of SpentMoney.
func (s *Expense) GetSpentMoney() float64 {
	return s.SpentMoney
}

// SetID sets the value of ID.
func (s *Expense) SetID(val int) {
	s.ID = val
}

// SetExpenseTypeID sets the value of ExpenseTypeID.
func (s *Expense) SetExpenseTypeID(val string) {
	s.ExpenseTypeID = val
}

// SetReatedAt sets the value of ReatedAt.
func (s *Expense) SetReatedAt(val OptDateTime) {
	s.ReatedAt = val
}

// SetSpentMoney sets the value of SpentMoney.
func (s *Expense) SetSpentMoney(val float64) {
	s.SpentMoney = val
}

type GetAllExpensesBadRequest ErrorResponse

func (*GetAllExpensesBadRequest) getAllExpensesRes() {}

type GetAllExpensesInternalServerError ErrorResponse

func (*GetAllExpensesInternalServerError) getAllExpensesRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
